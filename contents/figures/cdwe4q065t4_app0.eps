%!PS-Adobe-2.0 EPSF-2.0
%%Title: cdwe4q065t4_app0.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Sun Oct  9 19:18:09 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid true def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -73 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times-Roman) findfont 220 scalefont setfont
1.000 UL
LTb
858 660 M
63 0 V
5905 0 R
-63 0 V
stroke
726 660 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 0)]
] -73.3 MRshow
1.000 UL
LTb
858 1346 M
63 0 V
5905 0 R
-63 0 V
stroke
726 1346 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 1)]
] -73.3 MRshow
1.000 UL
LTb
858 2032 M
63 0 V
5905 0 R
-63 0 V
stroke
726 2032 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 2)]
] -73.3 MRshow
1.000 UL
LTb
858 2718 M
63 0 V
5905 0 R
-63 0 V
stroke
726 2718 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 3)]
] -73.3 MRshow
1.000 UL
LTb
858 3404 M
63 0 V
5905 0 R
-63 0 V
stroke
726 3404 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 4)]
] -73.3 MRshow
1.000 UL
LTb
858 4090 M
63 0 V
5905 0 R
-63 0 V
stroke
726 4090 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 5)]
] -73.3 MRshow
1.000 UL
LTb
858 4776 M
63 0 V
5905 0 R
-63 0 V
stroke
726 4776 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 6)]
] -73.3 MRshow
1.000 UL
LTb
858 660 M
0 63 V
0 4053 R
0 -63 V
stroke
858 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 0)]
] -73.3 MCshow
1.000 UL
LTb
1355 660 M
0 63 V
0 4053 R
0 -63 V
stroke
1355 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 30)]
] -73.3 MCshow
1.000 UL
LTb
1853 660 M
0 63 V
0 4053 R
0 -63 V
stroke
1853 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 60)]
] -73.3 MCshow
1.000 UL
LTb
2350 660 M
0 63 V
0 4053 R
0 -63 V
stroke
2350 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 90)]
] -73.3 MCshow
1.000 UL
LTb
2847 660 M
0 63 V
0 4053 R
0 -63 V
stroke
2847 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 120)]
] -73.3 MCshow
1.000 UL
LTb
3345 660 M
0 63 V
0 4053 R
0 -63 V
stroke
3345 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 150)]
] -73.3 MCshow
1.000 UL
LTb
3842 660 M
0 63 V
0 4053 R
0 -63 V
stroke
3842 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 180)]
] -73.3 MCshow
1.000 UL
LTb
4339 660 M
0 63 V
0 4053 R
0 -63 V
stroke
4339 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 210)]
] -73.3 MCshow
1.000 UL
LTb
4837 660 M
0 63 V
0 4053 R
0 -63 V
stroke
4837 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 240)]
] -73.3 MCshow
1.000 UL
LTb
5334 660 M
0 63 V
0 4053 R
0 -63 V
stroke
5334 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 270)]
] -73.3 MCshow
1.000 UL
LTb
5831 660 M
0 63 V
0 4053 R
0 -63 V
stroke
5831 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 300)]
] -73.3 MCshow
1.000 UL
LTb
6329 660 M
0 63 V
0 4053 R
0 -63 V
stroke
6329 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 330)]
] -73.3 MCshow
1.000 UL
LTb
6826 660 M
0 63 V
0 4053 R
0 -63 V
stroke
6826 440 M
[ [(Times-Roman) 220.0 0.0 true true 0 ( 360)]
] -73.3 MCshow
1.000 UL
LTb
1.000 UL
LTb
858 660 M
5968 0 V
0 4116 V
-5968 0 V
858 660 L
LTb
220 2718 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Times-Roman) 220.0 0.0 true true 0 (TDCS  \(10)]
[(Times-Roman) 176.0 110.0 true true 0 (10)]
[(Times-Roman) 220.0 0.0 true true 0 (  a. u.\))]
] -95.3 MCshow
grestore
LTb
3842 110 M
[ [(Times-Roman) 220.0 0.0 true true 0 (Electron angle \(degrees\))]
] -73.3 MCshow
1.000 UP
LTb
3842 2718 M
[ [(Times-Roman) 220.0 0.0 true true 0 (Q = 0.65 a. u.)]
] -73.3 MLshow
3842 2498 M
[ [(Times-Roman) 220.0 0.0 true true 0 (E= 4 eV)]
] -73.3 MLshow
4814 4603 M
[ [(Times-Roman) 220.0 0.0 true true 0 (CDW-EIS)]
] -73.3 MCshow
2.500 UP
1.000 UL
LT0
LTb
3526 4361 M
[ [(Times-Roman) 220.0 0.0 true true 0 (Experiment)]
] -73.3 MLshow
LT0
941 1665 CircleF
1102 1701 CircleF
1270 2136 CircleF
1438 2402 CircleF
1600 2620 CircleF
1768 2631 CircleF
1922 3018 CircleF
2098 2861 CircleF
2267 3006 CircleF
2429 2485 CircleF
2598 2351 CircleF
2761 1746 CircleF
2924 1225 CircleF
3093 970 CircleF
3262 946 CircleF
3423 885 CircleF
4421 919 CircleF
4583 931 CircleF
4752 1052 CircleF
4920 1124 CircleF
5082 1184 CircleF
5243 1305 CircleF
5433 1292 CircleF
5588 1328 CircleF
5742 1255 CircleF
5904 1170 CircleF
6080 1097 CircleF
6242 1049 CircleF
6403 1097 CircleF
6579 1169 CircleF
6740 1350 CircleF
3231 4361 CircleF
2.000 UL
LT1
LTb
3526 4097 M
[ [(Times-Roman) 220.0 0.0 true true 0 (T = 0 )]
[(Times-Roman) 176.0 110.0 true true 0 (o)]
[(Times-Roman) 220.0 0.0 true true 0 (K)]
] -95.3 MLshow
LT1
3067 4097 M
327 0 V
858 738 M
166 192 V
166 337 V
165 480 V
166 571 V
166 565 V
166 442 V
165 254 V
166 -56 V
166 -266 V
166 -435 V
166 -498 V
165 -451 V
166 -389 V
166 -280 V
166 -194 V
3510 882 L
166 -81 V
166 -50 V
166 -27 V
166 -12 V
165 4 V
166 33 V
166 13 V
166 39 V
165 45 V
166 47 V
166 42 V
166 28 V
166 6 V
165 -18 V
166 -49 V
166 -70 V
166 -81 V
165 -65 V
166 -18 V
1.250 UP
1.000 UL
LT2
LTb
3526 3833 M
[ [(Times-Roman) 220.0 0.0 true true 0 (T = 4 )]
[(Times-Roman) 176.0 110.0 true true 0 (o)]
[(Times-Roman) 220.0 0.0 true true 0 (K \(divided by 2\))]
] -95.3 MLshow
LT2
858 1251 Crs
1024 1728 Crs
1190 2324 Crs
1355 2960 Crs
1521 3569 Crs
1687 4044 Crs
1853 4294 Crs
2018 4288 Crs
2184 4008 Crs
2350 3544 Crs
2516 2962 Crs
2682 2380 Crs
2847 1868 Crs
3013 1470 Crs
3179 1190 Crs
3345 1010 Crs
3510 907 Crs
3676 860 Crs
3842 853 Crs
4008 873 Crs
4174 913 Crs
4339 968 Crs
4505 1034 Crs
4671 1086 Crs
4837 1143 Crs
5002 1199 Crs
5168 1241 Crs
5334 1261 Crs
5500 1247 Crs
5666 1196 Crs
5831 1109 Crs
5997 983 Crs
6163 856 Crs
6329 775 Crs
6494 786 Crs
6660 935 Crs
6826 1251 Crs
3231 3833 Crs
1.000 UL
LTb
858 660 M
5968 0 V
0 4116 V
-5968 0 V
858 660 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times-Roman
